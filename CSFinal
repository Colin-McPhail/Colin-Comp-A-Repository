/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.mycompany.stickfiguregame;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;

public class StickFigureGame extends JPanel implements ActionListener, KeyListener {
    
        public static void main(String[] args) {
        JFrame frame = new JFrame("Stick Figure Combat Game");
        StickFigureGame game = new StickFigureGame();
        frame.add(game);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
        
    private final Timer timer;
    private Player player;
    private ArrayList<Enemy> enemies;
    private ArrayList<Bullet> bullets;
    private ArrayList<AmmoBox> ammoBoxes;
    private ArrayList<Explosion> explosions;
    private boolean gameOver;
    private boolean gameStarted;
    private int score;
    private int wave;
    private long lastEnemySpawnTime;

    public StickFigureGame() {
        this.setPreferredSize(new Dimension(800, 600));
        this.setBackground(Color.WHITE);
        this.setFocusable(true);
        this.addKeyListener(this);

        resetGame();

        timer = new Timer(16, this); // 60 FPS
        timer.start();
    }

    private void resetGame() {
        player = new Player(400, 300);
        enemies = new ArrayList<>();
        bullets = new ArrayList<>();
        ammoBoxes = new ArrayList<>();
        explosions = new ArrayList<>();
        gameOver = false;
        gameStarted = false;
        score = 0;
        wave = 1;
        lastEnemySpawnTime = System.currentTimeMillis();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        if (!gameStarted) {
            // Rules and Controls Screen
            g.setColor(Color.BLACK);
            g.setFont(new Font("Arial", Font.BOLD, 24));
            g.drawString("Zombie Hunter", 250, 200);
            g.setFont(new Font("Arial", Font.PLAIN, 18));
            g.drawString("Controls:", 100, 250);
            g.drawString("Arrow Keys: Move Player", 100, 280);
            g.drawString("Space: Shoot", 100, 310);
            g.drawString("P: Start/Replay Game", 100, 340);
            g.drawString("Goal: Survive and score by defeating zombies! First wave starts soon, get Ready!.", 100, 370);
            return;
        }

        if (gameOver) {
            // Game Over Screen
            g.setColor(Color.RED);
            g.setFont(new Font("Arial", Font.BOLD, 36));
            g.drawString("Game Over!", 300, 300);
            g.drawString("Score: " + score, 320, 350);
            g.setFont(new Font("Arial", Font.PLAIN, 18));
            g.drawString("Press 'P' to Replay", 320, 400);
            return;
        }

        // Draw Player
        player.draw(g);

        // Draw Enemies
        for (Enemy enemy : enemies) {
            enemy.draw(g);
        }

        // Draw Bullets
        for (Bullet bullet : bullets) {
            bullet.draw(g);
        }

        // Draw Ammo Boxes
        for (AmmoBox ammoBox : ammoBoxes) {
            ammoBox.draw(g);
        }

        // Draw Explosions
        for (Explosion explosion : explosions) {
            explosion.draw(g);
        }

        // Draw Score and Ammo
        g.setColor(Color.BLACK);
        g.setFont(new Font("Arial", Font.BOLD, 18));
        g.drawString("Score: " + score, 10, 20);
        g.drawString("Ammo: " + player.getAmmo(), 700, 20);
        g.drawString("Wave: " + wave, 700, 40);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (gameStarted && !gameOver) {
            bullets.forEach(Bullet::update);
            enemies.forEach(enemy -> enemy.update(player.getX(), player.getY()));
            explosions.forEach(Explosion::update);

            checkCollisions();
            removeExpiredExplosions();
            spawnNewWave();
            spawnAmmoBox();

            repaint();
        }
    }

    private void spawnEnemies() {
        Random rand = new Random();
        for (int i = 0; i < wave * 5; i++) {
            int side = rand.nextInt(4); // Random side: 0=top, 1=right, 2=bottom, 3=left
            int x = 0, y = 0;
            switch (side) {
                case 0 -> { x = rand.nextInt(800); y = -50; } // Top
                case 1 -> { x = 850; y = rand.nextInt(600); } // Right
                case 2 -> { x = rand.nextInt(800); y = 650; } // Bottom
                case 3 -> { x = -50; y = rand.nextInt(600); } // Left
            }
            enemies.add(new Enemy(x, y));
        }
    }

    private void spawnAmmoBox() {
        if (ammoBoxes.size() < 3) { // Limit the number of ammo boxes on the screen
            Random rand = new Random();
            int x = rand.nextInt(750);
            int y = rand.nextInt(550);
            ammoBoxes.add(new AmmoBox(x, y));
        }
    }

    private void spawnNewWave() {
        long currentTime = System.currentTimeMillis();
        // Spawn new enemies periodically (every 10 seconds)
        if (currentTime - lastEnemySpawnTime > 15000) {
            wave++;
            spawnEnemies();
            lastEnemySpawnTime = currentTime;
        }
    }

    private void checkCollisions() {
        Iterator<Bullet> bulletIterator = bullets.iterator();
        while (bulletIterator.hasNext()) {
            Bullet bullet = bulletIterator.next();
            Iterator<Enemy> enemyIterator = enemies.iterator();
            while (enemyIterator.hasNext()) {
                Enemy enemy = enemyIterator.next();
                if (bullet.getBounds().intersects(enemy.getBounds())) {
                    bulletIterator.remove();
                    explosions.add(new Explosion(enemy.getX(), enemy.getY()));
                    enemyIterator.remove();
                    score += 10; // Increment score for each enemy hit
                    break;
                }
            }
        }

        Iterator<AmmoBox> ammoIterator = ammoBoxes.iterator();
        while (ammoIterator.hasNext()) {
            AmmoBox ammoBox = ammoIterator.next();
            if (ammoBox.getBounds().intersects(player.getBounds())) {
                player.replenishAmmo();
                ammoIterator.remove();
            }
        }

        for (Enemy enemy : enemies) {
            if (enemy.getBounds().intersects(player.getBounds())) {
                gameOver = true;
            }
        }

        // Remove bullets that go off-screen
        bullets.removeIf(Bullet::isOutOfBounds);
    }

    private void removeExpiredExplosions() {
        explosions.removeIf(Explosion::isExpired);
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_P) {
            if (gameOver || !gameStarted) {
                resetGame();
                gameStarted = true;
            }
        } else if (gameStarted && !gameOver) {
            switch (e.getKeyCode()) {
                case KeyEvent.VK_LEFT -> player.moveLeft();
                case KeyEvent.VK_RIGHT -> player.moveRight();
                case KeyEvent.VK_UP -> player.moveUp();
                case KeyEvent.VK_DOWN -> player.moveDown();
                case KeyEvent.VK_SPACE -> {
                    if (player.getAmmo() > 0) {
                        bullets.add(player.shoot());
                    }
                }
            }
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {}

}

// --- Game Entity Classes ---

class Player {
    private int x, y;
    private final int width = 20, height = 50;
    private int ammo;

    public Player(int x, int y) {
        this.x = x;
        this.y = y;
        this.ammo = 10; // Starting ammo
    }

    public void draw(Graphics g) {
        g.setColor(Color.BLUE);
        g.fillRect(x, y, width, height);
    }

    public void moveLeft() {
        x = Math.max(0, x - 10);
    }

    public void moveRight() {
        x = Math.min(780, x + 10); // Stay within 800px width
    }

    public void moveUp() {
        y = Math.max(0, y - 10);
    }

    public void moveDown() {
        y = Math.min(550, y + 10); // Stay within 600px height
    }

    public Bullet shoot() {
        ammo--;
        return new Bullet(x + width / 2, y, 0, -5); // Bullets go upward
    }

    public void replenishAmmo() {
        ammo += 10;
    }

    public int getAmmo() {
        return ammo;
    }

    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }
}

class Enemy {
    private int x, y;
    private final int width = 20, height = 50;
    private final Random rand = new Random();

    public Enemy(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void draw(Graphics g) {
        g.setColor(Color.RED);
        g.fillRect(x, y, width, height);
    }

    public void update(int playerX, int playerY) {
        // Move toward the player
        if (x < playerX) x += 1;
        else if (x > playerX) x -= 1;
        if (y < playerY) y += 1;
        else if (y > playerY) y -= 1;
    }

    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }

    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }
}

class Bullet {
    private int x, y, dx, dy;
    private final int width = 5, height = 5;

    public Bullet(int x, int y, int dx, int dy) {
        this.x = x;
        this.y = y;
        this.dx = dx;
        this.dy = dy;
    }

    public void draw(Graphics g) {
        g.setColor(Color.BLACK);
        g.fillOval(x, y, width, height);
    }

    public void update() {
        x += dx;
        y += dy;
    }

    public boolean isOutOfBounds() {
        return x < 0 || x > 800 || y < 0 || y > 600;
    }

    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }
}

class AmmoBox {
    private final int x, y;
    private final int size = 20;

    public AmmoBox(int x, int y) {
        this.x = x;
        this.y = y;
    }

    public void draw(Graphics g) {
        g.setColor(Color.GREEN);
        g.fillRect(x, y, size, size);
    }

    public Rectangle getBounds() {
        return new Rectangle(x, y, size, size);
    }
}

class Explosion {
    private int x, y, life;

    public Explosion(int x, int y) {
        this.x = x;
        this.y = y;
        this.life = 30; // Lasts for 30 frames
    }

    public void draw(Graphics g) {
        g.setColor(Color.RED);
        g.fillOval(x - 10, y - 10, 40, 40);
    }

    public void update() {
        life--;
    }

    public boolean isExpired() {
        return life <= 0;
    }
}
